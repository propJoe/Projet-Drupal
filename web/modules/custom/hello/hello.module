<?php

use Drupal\Core\Database\Database;
use Drupal\Core\User\UserInterface;
use Drupal\Core\Form\FormStateInterface;

function hello_help($route_name, \Drupal\Core\Routing\RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the block module.
    case 'help.page.hello':
      return '<p>' . t('Page d\'aide du module hello.') . '</p>';
  }
}
function hello_cron() {
  \Drupal::messenger()->addMessage(t('Message du hook_cron'));
}

function hello_form_alter(array &$form, FormStateInterface $formState, $form_id){
    if($form_id == 'node_article_form'){
        $form['revision_log']['#access'] = False;
    }
}

/**
* Implements hook_user_login().
*/
function hello_user_login(\Drupal\User\UserInterface $account){
  \Drupal::messenger()->addMessage(t('Bienvenu %name !',
    ['%name' => $account->getAccountName()]
  ));
  $roles = \Drupal::config('hello.settings')->get('user_stat_roles');
  // getRoles() retourne le tableau des roles de l'utilisateur qui se connecte (il a plusieur roles)
  $user_roles = $account->getRoles();
  // array_intersect() => compare 2 tableaux et retourne le nombre d'entrés correspondant au 2 tableaux
  $diff = array_intersect($roles, $user_roles);
  // S'il y a plus de 0 entré trouver entre les 2 tableaux
  if(count($diff) > 0) {
      \Drupal::database()->insert('hello_user_statistics')->fields([
          'time' => REQUEST_TIME,
          'uid' => $account->id(),
          'action' => 1,
      ])->execute();
  }
}
/**
* Implements hook_user_logout().
*/
function hello_user_logout(\Drupal\Core\Session\AccountProxy $account){

    $roles = \Drupal::config('hello.settings')->get('user_stat_roles');
    // getRoles() retourne le tableau des roles de l'utilisateur qui se connecte (il a plusieur roles)
    $user_roles = $account->getRoles();
    // array_intersect() => compare 2 tableaux et retourne le nombre d'entrés correspondant au 2 tableaux
    $diff = array_intersect($roles, $user_roles);
    // S'il y a plus de 0 entré trouver entre les 2 tableaux
    if(count($diff) > 0) {
        \Drupal::database()->insert('hello_user_statistics')->fields([
            'time' => REQUEST_TIME,
            'uid' => $account->id(),
            'action' => 0,
        ])->execute();
    }
}

/**
* Implements hook_user_delete().
*/
function hello_user_delete(\Drupal\User\UserInterface $account){
  \Drupal::database()->delete('hello_user_statistics')->condition(['uid', $user->id()])->execute();
}



function hello_theme($existing, $type, $theme, $path){
    return array(
        'hello' => array(
            'template' => 'hello',
            'variables' => array('user' => NULL,'connexions' => NULL)
        ),
    );
}

function hello_user_statistics(){
    $purge_days_number = \Drupal::config('hello_settings')->get('purge_days_number');
    if($purge_days_number != 0){
        \Drupal::database()->delete('hello_user_statistics')->condition('time', REQUEST_TIME - $purge_days_number * (24*3600), '<')->execute();
    }
}



function hello_form_user_admin_settings_alter(array &$form, FormStateInterface $form_state){

    $roles = \Drupal::entityTypeManager()->getStorage('user_role')->loadMultiple();
    unset($roles['anonymous']);
    $option = [];
    foreach($roles as $role){
        $option[$role->id()] = $role->label();
    }
    $form['user_statistics'] = [
        '#type' => 'details',
        '#title' => t('Choose role to track.'),
        '#weight' => -1,
    ];
    $form['user_statistics']['options'] = [
        '#type' => 'checkboxes',
        '#options' => $option,
        '#default_value' => \Drupal::config('hello.settings')->get('user_stat_roles'),
    ];
    // ajout d'une methode de traitement lors de la validation via le tableau submit
    // qui contient toute les methodes qui doivent etre appeler afin de valider le formulaire
    $form['#submit'][] = 'hello_user_admin_settings_form_submit';
    //ksm($form);
}
    // methode de traitement de formulaire
function hello_user_admin_settings_form_submit(array &$form, FormStateInterface $form_state){
    $options = $form_state->getValue('options');
    //user_stat_roles est une variable arbitraire, au hasard.
    \Drupal::configFactory()->getEditable('hello.settings')->set('user_stat_roles', $options)->save();
}
